background,
create_params(m3_semiMarkov_flexfpm_rel,uncertainty="none"))
## Define a individual-level continuous-time state-transition model
transmod <- create_IndivCtstmTrans(transmod_params,
input_data = transmod_data,
trans_mat = tmat,
clock = "mixt",
transition_types=c("reset","age","reset","age","reset"),
start_age = 61)
utility_tbl <- stateval_tbl(data.table(state_id = 1:2, est = c(0.8, 0.6)),
dist="fixed")
utilitymod <- create_StateVals(utility_tbl, hesim_data=hesim_dat, n=1)
## Cost table
point_costs_tbl <- stateval_tbl(data.table(state_id    = c(1,2,1,2),
strategy_id = c(1,1,2,2),
est = c(17584,5179,5909,5179)),
dist="fixed")
interval_costs_tbl <- stateval_tbl(data.table(state_id = 1:2, est = c(336,1008)),
dist="fixed")
point_costs <- create_StateVals(point_costs_tbl, hesim_data=hesim_dat, n=1,
method="starting")
interval_costs <- create_StateVals(interval_costs_tbl, hesim_data=hesim_dat, n=1)
##############################################################
##============================================================
## Run hesim model
##============================================================
##############################################################
econmod <- IndivCtstm$new(trans_model = transmod,
utility_model = utilitymod,
cost_models = list(point_costs,interval_costs))
system.time(econmod$sim_disease(max_t = 15, max_age = 100))
head(econmod$disprog_)
econmod$sim_stateprobs(t = c(4,8,15))
econmod$stateprobs_
xtabs(prob~strategy_id+t,data=econmod$stateprobs_,subset=state_id %in% 1:2)
xtabs(prob~state_id+strategy_id,data=econmod$stateprobs_)
econmod$sim_qalys(dr = .035)
xtabs(qalys~strategy_id, data=econmod$qalys_)
econmod$sim_qalys(dr = 0)
econmod$qalys_
econmod$sim_costs(dr = 0.035)
econmod$costs_
xtabs(costs~strategy_id, data=econmod$costs_)
head(econmod$disprog_)
econmod$sim_stateprobs(t = c(4,8,15))
## State occupation probabilities
econmod$sim_stateprobs(t = c(4,8,15))
econmod$stateprobs_
xtabs(prob~strategy_id+t,data=econmod$stateprobs_,subset=state_id %in% 1:2)
## Survival proportions at times
xtabs(prob~strategy_id+t,data=econmod$stateprobs_,subset=state_id %in% 1:2)
xtabs(prob~state_id+strategy_id,data=econmod$stateprobs_)
econmod$sim_qalys(dr = .035)
xtabs(qalys~strategy_id, data=econmod$qalys_)
## QALYs with discounting rate = 0%
econmod$sim_qalys(dr = 0)
econmod$qalys_
xtabs(qalys~strategy_id, data=econmod$qalys_)
## QALYs and LYs with discounting rate = 0%
econmod$sim_qalys(dr = 0)
econmod$qalys_
econmod$sim_costs(dr = 0.035)
econmod$costs_
## Costs with discounting rate = 3.5%
econmod$sim_costs(dr = 0.035)
econmod$costs_
xtabs(costs~strategy_id, data=econmod$costs_)
system.time(econmod$sim_disease(max_t = 15, max_age = 100))
head(econmod$disprog_)
## State occupation probabilities
econmod$sim_stateprobs(t = c(4,8,15))
econmod$stateprobs_
## Survival proportions at times
xtabs(prob~strategy_id+t,data=econmod$stateprobs_,subset=state_id %in% 1:2)
xtabs(prob~state_id+strategy_id,data=econmod$stateprobs_)
## QALYs with discounting rate = 3.5%
econmod$sim_qalys(dr = .035)
xtabs(qalys~strategy_id, data=econmod$qalys_)
## QALYs and LYs with discounting rate = 0%
econmod$sim_qalys(dr = 0)
econmod$qalys_
## Costs with discounting rate = 3.5%
econmod$sim_costs(dr = 0.035)
econmod$costs_
## Set seed for coherency
set.seed(12345)
##############################################################
##============================================================
## Read packages
##============================================================
##############################################################
library(tidyverse)
library(rstpm2)
library(microsimulation)
library(Rcpp)
library(hesim)
library(data.table)
##############################################################
##============================================================
## Run the survival models
##============================================================
##############################################################
source("03a_survmod_williams.R")
##############################################################
##============================================================
## Hesim implementation
## (m1: gompertz; m2: g-gamma; m3: gompertz)
## Microsimulation within an all-cause survival framework
##============================================================
##############################################################
sourceCpp(code="
// BH is required for older versions of microsimulation
// RcppArmadillo is required for newer versions of microsimulation
// [[Rcpp::depends(BH)]]
// [[Rcpp::depends(hesim)]]
// [[Rcpp::depends(RcppArmadillo)]]
// [[Rcpp::depends(microsimulation)]]
#include <RcppArmadillo.h>
#include <microsimulation.h>
#include <hesim.h>
#include <hesim/ctstm/ctstm.h>
using namespace arma;
using namespace ssim;
enum state_t {PFS, Prog, AcD};
enum event_t {toPFS, toProg, toAcD, toEOS};
typedef ssim::SummaryReport<short,short> Report;
/**
Utility: Random exponential using rate parameterisation
*/
double rexpRate(double rate) { return R::rexp(1.0/rate); }
// template<class T> double rexpRate(T rate) { return R::rexp(1.0/as<double>(rate)); }
/**
Utility: Run a set of simulations for a single process
*/
void runSimulations(ssim::cProcess* process, int n) {
for (int i = 0; i < n; i++) {
ssim::Sim::create_process(process);
ssim::Sim::run_simulation();
ssim::Sim::clear();
}
}
/**
Define a class for the process
*/
class IDMHesim : public ssim::cProcess
{
public:
int id;
state_t state;
Rcpp::List param;
Report *report;
std::unique_ptr<hesim::ctstm::transmod> m1;
std::unique_ptr<hesim::ctstm::transmod> m2;
std::unique_ptr<hesim::ctstm::transmod> m3;
int treat; // treat variable indicating 1=RFC or 0=FC
IDMHesim(Rcpp::List param, Report *report) : id(-1), param(param), report(report) {
// get the rates from param
treat = param(\"treat\");
m1 = hesim::ctstm::transmod::create(as<Rcpp::Environment>(param(\"m1\")));
m1 -> obs_index_.set_patient_index(0);
m1 -> obs_index_.set_strategy_index(treat);
m2 = hesim::ctstm::transmod::create(as<Rcpp::Environment>(param(\"m2\")));
m2 -> obs_index_.set_patient_index(0);
m2 -> obs_index_.set_strategy_index(treat);
m3 = hesim::ctstm::transmod::create(as<Rcpp::Environment>(param(\"m3\")));
m3 -> obs_index_.set_patient_index(0);
m3 -> obs_index_.set_strategy_index(treat);
}
void pfs();
void init(); // to be specified
void handleMessage(const ssim::cMessage* msg); // to be specified
void cancelEvents(); // utility function
};
void IDMHesim::pfs() {
state = PFS;
report -> setUtility(0.8);
scheduleAt(m1->random(0,0) + now(), toProg); // do we need to change the sample?
scheduleAt(m2->random(0,0) + now(), toAcD);}
/**
Initialise a simulation run for an individual
*/
void IDMHesim::init() {
id++;
pfs();
}
/**
Handle receiving self-messages
*/
void IDMHesim::handleMessage(const ssim::cMessage* msg) {
if (param(\"debug\")) Rprintf(\"id: %i, state: %i, kind: %i, previous: %f, now: %f\\n\",
id, state, msg->kind, this->previousEventTime, ssim::now());
report->add(state, msg->kind, this->previousEventTime, ssim::now(), id);
cancel_events();
scheduleAt(50.1, toEOS); // End of study--Time horizon 15 years
switch(msg->kind) {
case toPFS:
pfs();
break;
case toProg:
state = Prog;
report -> setUtility(0.6);
scheduleAt(m3->random(0,0) + now(), toAcD);
break;
case toAcD:
case toEOS:
ssim::Sim::stop_simulation();
break;
default:
REprintf(\"Invalid kind of event: %i.\\n\", msg->kind);
break;
}
if (id % 100000 == 0) Rcpp::checkUserInterrupt();
}
/**
Exported function: Set up the report and process, run the simulations and return a report
*/
//[[Rcpp::export]]
List callSimHesim(int n, List param, bool indivp) {
Report report(n,indivp);
report.setPartition(0.0,100.0,param(\"partitionBy\"));
report.setDiscountRate(param(\"discountRate\"));
IDMHesim person(param,&report);
runSimulations(&person, n);
Rcpp::List lst = report.asList();
lst.push_back(param,\"param\");
return lst;
}")
simulations = function(n, param, simulator=callSimHesim, indivp=TRUE) {
object = simulator(n, param, indivp)
if(!all(c("ut","costs","pt","events","prev") %in% names(object)))
stop("simulator failed")
stateT = c("PFS", "Prog", "AcD")
eventT = c("toPFS", "toProg", "toAcD", "toEOS")
for (name in c("ut","costs","pt","events","prev"))
object[[name]] = transform(object[[name]], state=stateT[Key+1], time=age, Key=NULL, age=NULL)
object$events = transform(object$events, event=eventT[event+1])
class(object) = c("IDM","SummaryReport")
object
}
##############################################################
##============================================================
## Set parameters
##============================================================
##############################################################
results <- list()  # Create an empty list to store the results
treat_values <- c(0, 1) # treat = 0, 1
## Hesim transition models
prepare_input_data = function(strategies=NULL,
n_patients=NULL, patients=NULL,
tmat=NULL, states=NULL, state_names=NULL, ...) {
stopifnot(!(is.null(n_patients) && is.null(patients)),
!(is.null(tmat) && is.null(states) && is.null(state_names)),
is.null(patients) || "patient_id" %in% names(patients))
## strategies
if (is.null(strategies))
strategies = data.frame(strategy_id = 1)
## patients
if (is.null(patients))
patients = data.frame(patient_id = 1:n_patients, ...)
## states
if (is.null(states) && !is.null(tmat))
states = data.frame( # Non-death health states
state_id = 1:nrow(tmat),
state_name = colnames(tmat)
)
if (is.null(states) && !is.null(state_names))
states = data.frame( # Non-death health states
state_id = 1:length(state_names),
state_name = state_names
)
## Organize data to read in Hesim
hesim_dat = hesim_data(strategies = strategies,
patients = patients,
states = states)
transmod_data = hesim::expand(hesim_dat, by = c("strategies", "patients"))
## Add some default columns to X
if (!("cons" %in% names(transmod_data)))
transmod_data$cons = 1
if (!("(Intercept)" %in% names(transmod_data)))
transmod_data[["(Intercept)"]] = 1
return(transmod_data)
}
##############################################################
##============================================================
## Use hesim to read the standaradized models
##============================================================
##############################################################
tmat = matrix(c(NA,1, NA,NA), 2,2,TRUE)
colnames(tmat) = rownames(tmat) = c("Base", "Next")
transmod_data = prepare_input_data(n_patients = 1, tmat=tmat,
strategies = data.frame(strategy_id = 1:2), treat = 1)
transmod_data = transmod_data[strategy_id==1, treat := 0]
transmod_params1 <- params_surv_list(create_params(m1_gom,uncertainty="none"))
transmod1 <- create_IndivCtstmTrans(transmod_params1,
input_data = transmod_data,
trans_mat = tmat,
clock = "reset")
transmod_params2 <- params_surv_list(create_params(m2_gam,uncertainty="none"))
transmod2 <- create_IndivCtstmTrans(transmod_params2,
input_data = transmod_data,
trans_mat = tmat,
clock = "reset")
transmod_params3 <- params_surv_list(create_params(m3_semiMarkov_gom, uncertainty="none"))
transmod3 <- create_IndivCtstmTrans(transmod_params3,
input_data = transmod_data,
trans_mat = tmat,
clock = "reset")
##############################################################
##============================================================
## Run the microsimulation model
##============================================================
##############################################################
results<- lapply(treat_values, function(treat_value) {
ndata <- data.frame(treat = treat_value)
param <- list(treat = treat_value,
partitionBy = 0.1,
discountRate = 0.035,
debug = FALSE,
dxage = 61,
## Survival models
m1 = transmod1,
m2 = transmod2,
m3 = transmod3
)
sim <- simulations(1e5, param = param, simulator=callSimHesim, indivp = FALSE)
return(sim)
})
## Assign results
results_FC <- results[[1]]
results_RFC <- results[[2]]
results_FC
results_RFC
##############################################################
##============================================================
## Run the microsimulation model
##============================================================
##############################################################
results<- lapply(treat_values, function(treat_value) {
ndata <- data.frame(treat = treat_value)
param <- list(treat = treat_value,
partitionBy = 0.1,
discountRate = 0,
debug = FALSE,
dxage = 61,
## Survival models
m1 = transmod1,
m2 = transmod2,
m3 = transmod3
)
sim <- simulations(1e5, param = param, simulator=callSimHesim, indivp = FALSE)
return(sim)
})
## Assign results
results_FC <- results[[1]]
results_RFC <- results[[2]]
results_FC
results_RFC
## Save results
## Prevent from changing the results. We put # here.
saveRDS(results_FC, file = "../Data/04a7_semiMarkov_williams_ac_microsim_FC.rds")
saveRDS(results_RFC, file = "../Data/04a7_semiMarkov_williams_ac_microsim_RFC.rds")
source("~/Library/CloudStorage/OneDrive-KarolinskaInstitutet/ec_phd/Study2_Microsim/ChenEYT_microsim/Program/04b_table_survextrap.R", echo=TRUE)
###############################################################################
## Semi-Markov with standard parametric models, all-cause survival framework ##
###############################################################################
## This is to show the results are identical to Williams 2017 .
## Read the results
semiMarkov_williams_ac_FC <- readRDS("../Data/04a7_semiMarkov_williams_ac_microsim_FC.rds")
semiMarkov_williams_ac_RFC <- readRDS("../Data/04a7_semiMarkov_williams_ac_microsim_RFC.rds")
## Obtain survival at times 4, 8, 15, and 50 years/lifetime
prev_FC <- as.data.frame(semiMarkov_williams_ac_FC$prev)
prev_FC$prob <- prev_FC$number / semiMarkov_williams_ac_FC$n
prev_FC$time <- round(prev_FC$time, digits = 1)
prev_RFC <- as.data.frame(semiMarkov_williams_ac_RFC$prev)
prev_RFC$prob <- prev_RFC$number / semiMarkov_williams_ac_RFC$n
prev_RFC$time <- round(prev_RFC$time, digits = 1)
semiMarkov_williams_ac_FC_4yr_surv_PFS <- prev_FC$prob[prev_FC$time == 4 & prev_FC$state == "PFS"]
semiMarkov_williams_ac_FC_4yr_surv_Prog <- prev_FC$prob[prev_FC$time == 4 & prev_FC$state == "Prog"]
semiMarkov_williams_ac_FC_4yr_surv <- semiMarkov_williams_ac_FC_4yr_surv_PFS + semiMarkov_williams_ac_FC_4yr_surv_Prog
semiMarkov_williams_ac_RFC_4yr_surv_PFS <- prev_RFC$prob[prev_RFC$time == 4 & prev_RFC$state == "PFS"]
semiMarkov_williams_ac_RFC_4yr_surv_Prog <- prev_RFC$prob[prev_RFC$time == 4 & prev_RFC$state == "Prog"]
semiMarkov_williams_ac_RFC_4yr_surv <- semiMarkov_williams_ac_RFC_4yr_surv_PFS + semiMarkov_williams_ac_RFC_4yr_surv_Prog
semiMarkov_williams_ac_FC_8yr_surv_PFS <- prev_FC$prob[prev_FC$time == 8 & prev_FC$state == "PFS"]
semiMarkov_williams_ac_FC_8yr_surv_Prog <- prev_FC$prob[prev_FC$time == 8 & prev_FC$state == "Prog"]
semiMarkov_williams_ac_FC_8yr_surv <- semiMarkov_williams_ac_FC_8yr_surv_PFS + semiMarkov_williams_ac_FC_8yr_surv_Prog
semiMarkov_williams_ac_RFC_8yr_surv_PFS <- prev_RFC$prob[prev_RFC$time == 8 & prev_RFC$state == "PFS"]
semiMarkov_williams_ac_RFC_8yr_surv_Prog <- prev_RFC$prob[prev_RFC$time == 8 & prev_RFC$state == "Prog"]
semiMarkov_williams_ac_RFC_8yr_surv <- semiMarkov_williams_ac_RFC_8yr_surv_PFS + semiMarkov_williams_ac_RFC_8yr_surv_Prog
semiMarkov_williams_ac_FC_15yr_surv_PFS <- prev_FC$prob[prev_FC$time == 15 & prev_FC$state == "PFS"]
semiMarkov_williams_ac_FC_15yr_surv_Prog <- prev_FC$prob[prev_FC$time == 15 & prev_FC$state == "Prog"]
semiMarkov_williams_ac_FC_15yr_surv <- semiMarkov_williams_ac_FC_15yr_surv_PFS + semiMarkov_williams_ac_FC_15yr_surv_Prog
semiMarkov_williams_ac_RFC_15yr_surv_PFS <- prev_RFC$prob[prev_RFC$time == 15 & prev_RFC$state == "PFS"]
semiMarkov_williams_ac_RFC_15yr_surv_Prog <- prev_RFC$prob[prev_RFC$time == 15 & prev_RFC$state == "Prog"]
semiMarkov_williams_ac_RFC_15yr_surv <- semiMarkov_williams_ac_RFC_15yr_surv_PFS + semiMarkov_williams_ac_RFC_15yr_surv_Prog
semiMarkov_williams_ac_FC_lifetime_surv <- 0
semiMarkov_williams_ac_RFC_lifetime_surv <- 0
###############################################################################
## Semi-Markov with flexible parametric models, all-cause survival framework ##
###############################################################################
## Read the results
semiMarkov_fpm_ac_FC <- readRDS("../Data/04a5_semiMarkov_fpm_ac_microsim_FC.rds")
semiMarkov_fpm_ac_RFC <- readRDS("../Data/04a5_semiMarkov_fpm_ac_microsim_RFC.rds")
## Obtain survival at times 4, 8, 15, and 50 years/lifetime
prev_FC <- as.data.frame(semiMarkov_fpm_ac_FC$prev)
prev_FC$prob <- prev_FC$number / semiMarkov_fpm_ac_FC$n
prev_FC$time <- round(prev_FC$time, digits = 1)
prev_RFC <- as.data.frame(semiMarkov_fpm_ac_RFC$prev)
prev_RFC$prob <- prev_RFC$number / semiMarkov_fpm_ac_RFC$n
prev_RFC$time <- round(prev_RFC$time, digits = 1)
semiMarkov_fpm_ac_FC_4yr_surv_PFS <- prev_FC$prob[prev_FC$time == 4 & prev_FC$state == "PFS"]
semiMarkov_fpm_ac_FC_4yr_surv_Prog <- prev_FC$prob[prev_FC$time == 4 & prev_FC$state == "Prog"]
semiMarkov_fpm_ac_FC_4yr_surv <- semiMarkov_fpm_ac_FC_4yr_surv_PFS + semiMarkov_fpm_ac_FC_4yr_surv_Prog
semiMarkov_fpm_ac_RFC_4yr_surv_PFS <- prev_RFC$prob[prev_RFC$time == 4 & prev_RFC$state == "PFS"]
semiMarkov_fpm_ac_RFC_4yr_surv_Prog <- prev_RFC$prob[prev_RFC$time == 4 & prev_RFC$state == "Prog"]
semiMarkov_fpm_ac_RFC_4yr_surv <- semiMarkov_fpm_ac_RFC_4yr_surv_PFS + semiMarkov_fpm_ac_RFC_4yr_surv_Prog
semiMarkov_fpm_ac_FC_8yr_surv_PFS <- prev_FC$prob[prev_FC$time == 8 & prev_FC$state == "PFS"]
semiMarkov_fpm_ac_FC_8yr_surv_Prog <- prev_FC$prob[prev_FC$time == 8 & prev_FC$state == "Prog"]
semiMarkov_fpm_ac_FC_8yr_surv <- semiMarkov_fpm_ac_FC_8yr_surv_PFS + semiMarkov_fpm_ac_FC_8yr_surv_Prog
semiMarkov_fpm_ac_RFC_8yr_surv_PFS <- prev_RFC$prob[prev_RFC$time == 8 & prev_RFC$state == "PFS"]
semiMarkov_fpm_ac_RFC_8yr_surv_Prog <- prev_RFC$prob[prev_RFC$time == 8 & prev_RFC$state == "Prog"]
semiMarkov_fpm_ac_RFC_8yr_surv <- semiMarkov_fpm_ac_RFC_8yr_surv_PFS + semiMarkov_fpm_ac_RFC_8yr_surv_Prog
semiMarkov_fpm_ac_FC_15yr_surv_PFS <- prev_FC$prob[prev_FC$time == 15 & prev_FC$state == "PFS"]
semiMarkov_fpm_ac_FC_15yr_surv_PFS <- 0
semiMarkov_fpm_ac_FC_15yr_surv_Prog <- prev_FC$prob[prev_FC$time == 15 & prev_FC$state == "Prog"]
semiMarkov_fpm_ac_FC_15yr_surv <- semiMarkov_fpm_ac_FC_15yr_surv_PFS + semiMarkov_fpm_ac_FC_15yr_surv_Prog
semiMarkov_fpm_ac_RFC_15yr_surv_PFS <- prev_RFC$prob[prev_RFC$time == 15 & prev_RFC$state == "PFS"]
semiMarkov_fpm_ac_RFC_15yr_surv_Prog <- prev_RFC$prob[prev_RFC$time == 15 & prev_RFC$state == "Prog"]
semiMarkov_fpm_ac_RFC_15yr_surv <- semiMarkov_fpm_ac_RFC_15yr_surv_PFS + semiMarkov_fpm_ac_RFC_15yr_surv_Prog
semiMarkov_fpm_ac_FC_50yr_surv_PFS <- prev_FC$prob[prev_FC$time == 50 & prev_FC$state == "PFS"]
semiMarkov_fpm_ac_FC_50yr_surv_PFS <- 0
semiMarkov_fpm_ac_FC_50yr_surv_Prog <- prev_FC$prob[prev_FC$time == 50 & prev_FC$state == "Prog"]
semiMarkov_fpm_ac_FC_50yr_surv <- semiMarkov_fpm_ac_FC_50yr_surv_PFS + semiMarkov_fpm_ac_FC_50yr_surv_Prog
semiMarkov_fpm_ac_RFC_50yr_surv_PFS <- prev_RFC$prob[prev_RFC$time == 50 & prev_RFC$state == "PFS"]
semiMarkov_fpm_ac_RFC_50yr_surv_PFS <- 0
semiMarkov_fpm_ac_RFC_50yr_surv_Prog <- prev_RFC$prob[prev_RFC$time == 50 & prev_RFC$state == "Prog"]
semiMarkov_fpm_ac_RFC_50yr_surv <- semiMarkov_fpm_ac_RFC_50yr_surv_PFS + semiMarkov_fpm_ac_RFC_50yr_surv_Prog
semiMarkov_fpm_ac_FC_lifetime_surv <- semiMarkov_fpm_ac_FC_50yr_surv
semiMarkov_fpm_ac_RFC_lifetime_surv <- semiMarkov_fpm_ac_RFC_50yr_surv
###################################################################################
## Semi-Markov with flexible parametric models, relative survival framework ##
###################################################################################
## Read the results
semiMarkov_fpm_rel_FC <- readRDS("../Data/04a6_semiMarkov_fpm_rel_microsim_FC.rds")
semiMarkov_fpm_rel_RFC <- readRDS("../Data/04a6_semiMarkov_fpm_rel_microsim_RFC.rds")
## Obtain survival at times 4, 8, 15, and 50 years/lifetime
prev_FC <- as.data.frame(semiMarkov_fpm_rel_FC$prev)
prev_FC$prob <- prev_FC$number / semiMarkov_fpm_rel_FC$n
source("~/Library/CloudStorage/OneDrive-KarolinskaInstitutet/ec_phd/Study2_Microsim/ChenEYT_microsim/Program/04b_table_survextrap.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-KarolinskaInstitutet/ec_phd/Study2_Microsim/ChenEYT_microsim/Program/04a7_semiMarkov_williams_ac_microsim.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-KarolinskaInstitutet/ec_phd/Study2_Microsim/ChenEYT_microsim/Program/04b_table_survextrap.R", echo=TRUE)
## Obtain survival at times 4, 8, 15, and 50 years/lifetime
prev_FC <- as.data.frame(semiMarkov_williams_ac_FC$prev)
prev_FC$prob <- prev_FC$number / semiMarkov_williams_ac_FC$n
prev_FC$time <- round(prev_FC$time, digits = 1)
prev_RFC <- as.data.frame(semiMarkov_williams_ac_RFC$prev)
prev_RFC$prob <- prev_RFC$number / semiMarkov_williams_ac_RFC$n
prev_RFC$time <- round(prev_RFC$time, digits = 1)
semiMarkov_williams_ac_FC_4yr_surv_PFS <- prev_FC$prob[prev_FC$time == 4 & prev_FC$state == "PFS"]
semiMarkov_williams_ac_FC_4yr_surv_Prog <- prev_FC$prob[prev_FC$time == 4 & prev_FC$state == "Prog"]
semiMarkov_williams_ac_FC_4yr_surv <- semiMarkov_williams_ac_FC_4yr_surv_PFS + semiMarkov_williams_ac_FC_4yr_surv_Prog
semiMarkov_williams_ac_FC_4yr_surv
semiMarkov_williams_ac_RFC_4yr_surv_PFS <- prev_RFC$prob[prev_RFC$time == 4 & prev_RFC$state == "PFS"]
semiMarkov_williams_ac_RFC_4yr_surv_Prog <- prev_RFC$prob[prev_RFC$time == 4 & prev_RFC$state == "Prog"]
semiMarkov_williams_ac_RFC_4yr_surv <- semiMarkov_williams_ac_RFC_4yr_surv_PFS + semiMarkov_williams_ac_RFC_4yr_surv_Prog
semiMarkov_williams_ac_RFC_4yr_surv
semiMarkov_williams_ac_FC_8yr_surv_PFS <- prev_FC$prob[prev_FC$time == 8 & prev_FC$state == "PFS"]
semiMarkov_williams_ac_FC_8yr_surv_Prog <- prev_FC$prob[prev_FC$time == 8 & prev_FC$state == "Prog"]
semiMarkov_williams_ac_FC_8yr_surv <- semiMarkov_williams_ac_FC_8yr_surv_PFS + semiMarkov_williams_ac_FC_8yr_surv_Prog
semiMarkov_williams_ac_RFC_8yr_surv_PFS <- prev_RFC$prob[prev_RFC$time == 8 & prev_RFC$state == "PFS"]
semiMarkov_williams_ac_RFC_8yr_surv_Prog <- prev_RFC$prob[prev_RFC$time == 8 & prev_RFC$state == "Prog"]
semiMarkov_williams_ac_RFC_8yr_surv <- semiMarkov_williams_ac_RFC_8yr_surv_PFS + semiMarkov_williams_ac_RFC_8yr_surv_Prog
semiMarkov_williams_ac_FC_8yr_surv
semiMarkov_williams_ac_RFC_8yr_surv
semiMarkov_williams_ac_FC_15yr_surv
semiMarkov_williams_ac_FC_15yr_surv_PFS <- prev_FC$prob[prev_FC$time == 15 & prev_FC$state == "PFS"]
semiMarkov_williams_ac_FC_15yr_surv_Prog <- prev_FC$prob[prev_FC$time == 15 & prev_FC$state == "Prog"]
semiMarkov_williams_ac_FC_15yr_surv <- semiMarkov_williams_ac_FC_15yr_surv_PFS + semiMarkov_williams_ac_FC_15yr_surv_Prog
semiMarkov_williams_ac_FC_15yr_surv_PFS
semiMarkov_williams_ac_FC_15yr_surv_Prog
semiMarkov_williams_ac_FC_15yr_surv_PFS <- 0
semiMarkov_williams_ac_FC_15yr_surv_Prog <- prev_FC$prob[prev_FC$time == 15 & prev_FC$state == "Prog"]
semiMarkov_williams_ac_FC_15yr_surv <- semiMarkov_williams_ac_FC_15yr_surv_PFS + semiMarkov_williams_ac_FC_15yr_surv_Prog
semiMarkov_williams_ac_FC_15yr_surv
semiMarkov_williams_ac_RFC_15yr_surv_PFS
semiMarkov_williams_ac_RFC_15yr_surv_PFS <- 0
semiMarkov_williams_ac_RFC_15yr_surv_Prog <- prev_RFC$prob[prev_RFC$time == 15 & prev_RFC$state == "Prog"]
semiMarkov_williams_ac_RFC_15yr_surv <- semiMarkov_williams_ac_RFC_15yr_surv_PFS + semiMarkov_williams_ac_RFC_15yr_surv_Prog
semiMarkov_williams_ac_RFC_15yr_surv
###############################################################################
## Semi-Markov with standard parametric models, all-cause survival framework ##
###############################################################################
## Define the time intervals
time_intervals <- c(4, 8, 15, 50)
## loop over the time intervals
for (i in time_intervals) {
report <- lapply(list(semiMarkov_williams_ac_FC, semiMarkov_williams_ac_RFC), function(sim){
# create a subset of the data where 'time' is less than or equal to i
sim$pt_subset <- subset(sim$pt, time <= i)
# calculate LY using the subset and print it
LY <- (sum(sim$pt_subset$pt) - sum(subset(sim$pt_subset, state %in% c("AcD"))$pt)) / sim$n
})
## FC, treat = 0
value <- report[[1]]
var <- paste("semiMarkov_williams_ac_FC",i,"yr")
var_list[[var]] <- value
print(paste("Semi-Markov: SPMs, ASF", "FC", "Area under curve for time <=", i, ": ", value))
## RFC, treat = 1
value <- report[[2]]
var <- paste("semiMarkov_williams_ac_RFC",i,"yr")
var_list[[var]] <- value
print(paste("Semi-Markov: SPMs, ASF", "RFC", "Area under curve for time <=", i, ": ", value))
}
