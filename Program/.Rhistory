using namespace ssim;
enum state_t {PFS, Prog, ExcD, ExpD};
enum event_t {toPFS, toProg, toExcD, toExpD, toEOS};
typedef ssim::SummaryReport<short,short> Report;
/**
Utility: Random exponential using rate parameterisation
*/
double rexpRate(double rate) { return R::rexp(1.0/rate); }
// template<class T> double rexpRate(T rate) { return R::rexp(1.0/as<double>(rate)); }
/**
Utility: Run a set of simulations for a single process
*/
void runSimulations(ssim::cProcess* process, int n) {
for (int i = 0; i < n; i++) {
ssim::Sim::create_process(process);
ssim::Sim::run_simulation();
ssim::Sim::clear();
}
}
/**
Define a class for the process
*/
class IDM : public ssim::cProcess
{
public:
int id;
state_t state;
Rcpp::List param;
Report *report;
ssim::Rpexp background;
ssim::gsm m1;
ssim::gsm m2;
ssim::gsm m3;
double dxage;
// Utility
double u_PFS;
double u_Prog;
int treat; // var_value variable indicating 1=RFC or 0=FC
IDM(Rcpp::List param, Report *report) : id(-1), param(param), report(report), background() {
// get the rates from param
vec mu0 = as<vec>(param(\"mu0\"));
vec ages = as<vec>(param(\"ages\"));
background = ssim::Rpexp(mu0.memptr(), ages.memptr(), ages.size());
// read in from param...
m1 = ssim::gsm(as<List>(param(\"m1\")));
m2 = ssim::gsm(as<List>(param(\"m2\")));
m3 = ssim::gsm(as<List>(param(\"m3\")));
dxage = param(\"dxage\");
treat = param(\"treat\");
// Utility
u_PFS = param(\"u_PFS\");
u_Prog = param(\"u_Prog\");
}
void pfs();
void init(); // to be specified
void handleMessage(const ssim::cMessage* msg);
void cancelEvents();
};
void IDM::pfs() {
state = PFS;
report -> setUtility(u_PFS);
scheduleAt(m1.randU(R::runif(0.0,1.0), now()), toProg);
scheduleAt(m2.randU(R::runif(0.0,1.0), now()), toExcD);
scheduleAt(background.rand(std::exp(-R::rexp(1.0)), dxage+now())-dxage, toExpD);
}
/**
Initialise a simulation run for an individual
*/
void IDM::init() {
id++;
pfs();
}
/**
Handle receiving self-messages
*/
void IDM::handleMessage(const ssim::cMessage* msg) {
if (param(\"debug\")) Rprintf(\"id: %i, state: %i, kind: %i, previous: %f, now: %f\\n\",
id, state, msg->kind, this->previousEventTime, ssim::now());
report->add(state, msg->kind, this->previousEventTime, ssim::now(), id);
cancel_events();
scheduleAt(15, toEOS); // End of study--Time horizon 15 years
switch(msg->kind) {
case toPFS:
pfs();
break;
case toProg:
state = Prog;
report -> setUtility(u_Prog);
scheduleAt(m3.randU(R::runif(0.0,1.0)) + now(), toExcD);
scheduleAt(background.rand(std::exp(-R::rexp(1.0)), dxage+now())-dxage, toExpD);
break;
case toExcD:
case toExpD:
case toEOS:
ssim::Sim::stop_simulation();
break;
default:
REprintf(\"Invalid kind of event: %i.\\n\", msg->kind);
break;
}
if (id % 100000 == 0) Rcpp::checkUserInterrupt();
}
/**
Exported function: Set up the report and process, run the simulations and return a report
*/
//[[Rcpp::export]]
List callSim_reduced(int n, List param, bool indivp) {
Report report(n,indivp);
report.setPartition(0.0,100.0,param(\"partitionBy\"));
report.setDiscountRate(param(\"discountRate\"));
IDM person(param,&report);
runSimulations(&person, n);
Rcpp::List lst = report.asList();
lst.push_back(param,\"param\");
return lst;
}")
simulations_reduced = function(n, param, simulator=callSim_reduced, indivp=TRUE) {
object = simulator(n, param, indivp)
if(!all(c("ut","costs","pt","events","prev") %in% names(object)))
stop("simulator failed")
stateT = c("PFS", "Prog", "ExcD", "ExpD")
eventT = c("toPFS", "toProg", "toExcD", "toExpD", "toEOS")
for (name in c("ut","costs","pt","events","prev"))
object[[name]] = transform(object[[name]], state=stateT[Key+1], time=age, Key=NULL, age=NULL)
object$events = transform(object$events, event=eventT[event+1])
class(object) = c("IDM","SummaryReport")
object
}
##############################################################
##============================================================
## The complete microsimulation model begins here
##============================================================
##############################################################
sourceCpp(code="
// BH is required for older versions of microsimulation
// RcppArmadillo is required for newer versions of microsimulation
// [[Rcpp::depends(BH)]]
// [[Rcpp::depends(RcppArmadillo)]]
// [[Rcpp::depends(microsimulation)]]
#include <RcppArmadillo.h>
#include <microsimulation.h>
using namespace arma;
using namespace ssim;
enum state_t {PFS, Prog, ExcD, ExpD};
enum event_t {toPFS, toProg, toExcD, toExpD, toEOS};
typedef ssim::SummaryReport<short,short> Report;
/**
Utility: Random exponential using rate parameterisation
*/
double rexpRate(double rate) { return R::rexp(1.0/rate); }
// template<class T> double rexpRate(T rate) { return R::rexp(1.0/as<double>(rate)); }
/**
Utility: Run a set of simulations for a single process
*/
void runSimulations(ssim::cProcess* process, int n) {
for (int i = 0; i < n; i++) {
ssim::Sim::create_process(process);
ssim::Sim::run_simulation();
ssim::Sim::clear();
}
}
/**
Define a class for the process
*/
class IDM : public ssim::cProcess
{
public:
int id;
state_t state;
Rcpp::List param;
Report *report;
ssim::Rpexp background;
ssim::gsm m1;
ssim::gsm m2;
ssim::gsm m3;
double dxage;
int treat; // treat variable indicating 1=RFC or 0=FC
// Utility
double u_PFS;
double u_Prog;
// Cost data
// RFC
double c_RFC_rituximab;
double c_RFC_admin_rituximab;
double c_RFC_fludarabine;
double c_RFC_admin_fludarabine;
double c_RFC_cyclophosphamide;
double c_RFC_admin_cyclophosphamide;
double c_RFC_support_PFS;
double c_RFC_bone_marrow_transplantation;
double c_RFC_blood_transfusions;
double c_RFC_support_Prog;
double c_RFC_therapy;
// FC
double c_FC_rituximab;
double c_FC_admin_rituximab;
double c_FC_fludarabine;
double c_FC_admin_fludarabine;
double c_FC_cyclophosphamide;
double c_FC_admin_cyclophosphamide;
double c_FC_support_PFS;
double c_FC_bone_marrow_transplantation;
double c_FC_blood_transfusions;
double c_FC_support_Prog;
double c_FC_therapy;
IDM(Rcpp::List param, Report *report) : id(-1), param(param), report(report), background() {
// get the rates from param
vec mu0 = as<vec>(param(\"mu0\"));
vec ages = as<vec>(param(\"ages\"));
background = ssim::Rpexp(mu0.memptr(), ages.memptr(), ages.size());
m1 = ssim::gsm(as<List>(param(\"m1\")));
m2 = ssim::gsm(as<List>(param(\"m2\")));
m3 = ssim::gsm(as<List>(param(\"m3\")));
dxage = param(\"dxage\");
treat = param(\"treat\");
// Utility
u_PFS = param(\"u_PFS\");
u_Prog = param(\"u_Prog\");
// Cost data
// RFC
c_RFC_rituximab = param(\"c_RFC_rituximab\");
c_RFC_admin_rituximab = param(\"c_RFC_admin_rituximab\");
c_RFC_fludarabine = param(\"c_RFC_fludarabine\");
c_RFC_admin_fludarabine = param(\"c_RFC_admin_fludarabine\");
c_RFC_cyclophosphamide = param(\"c_RFC_cyclophosphamide\");
c_RFC_admin_cyclophosphamide = param(\"c_RFC_admin_cyclophosphamide\");
c_RFC_support_PFS = param(\"c_RFC_support_PFS\");
c_RFC_bone_marrow_transplantation = param(\"c_RFC_bone_marrow_transplantation\");
c_RFC_blood_transfusions = param(\"c_RFC_blood_transfusions\");
c_RFC_support_Prog= param(\"c_RFC_support_Prog\");
c_RFC_therapy = param(\"c_RFC_therapy\");
// FC
c_FC_rituximab = param(\"c_FC_rituximab\");
c_FC_admin_rituximab = param(\"c_FC_admin_rituximab\");
c_FC_fludarabine = param(\"c_FC_fludarabine\");
c_FC_admin_fludarabine = param(\"c_FC_admin_fludarabine\");
c_FC_cyclophosphamide = param(\"c_FC_cyclophosphamide\");
c_FC_admin_cyclophosphamide = param(\"c_FC_admin_cyclophosphamide\");
c_FC_support_PFS = param(\"c_FC_support_PFS\");
c_FC_bone_marrow_transplantation = param(\"c_FC_bone_marrow_transplantation\");
c_FC_blood_transfusions = param(\"c_FC_blood_transfusions\");
c_FC_support_Prog = param(\"c_FC_support_Prog\");
c_FC_therapy = param(\"c_FC_therapy\");
}
void pfs();
void init(); // to be specified
void handleMessage(const ssim::cMessage* msg); // to be specified
void cancelEvents(); // utility function
};
void IDM::pfs() {
state = PFS;
report -> setUtility(u_PFS);
if (treat == 1) { // RFC
report -> addPointCost(state, c_RFC_rituximab);
report -> addPointCost(state, c_RFC_admin_rituximab);
report -> addPointCost(state, c_RFC_fludarabine);
report -> addPointCost(state, c_RFC_admin_fludarabine);
report -> addPointCost(state, c_RFC_cyclophosphamide);
report -> addPointCost(state, c_RFC_admin_cyclophosphamide);
report -> setCost(c_RFC_support_PFS);
report -> addPointCost(state, c_RFC_bone_marrow_transplantation);
report -> addPointCost(state, c_RFC_blood_transfusions);
}
else { // FC
report -> addPointCost(state, c_FC_rituximab);
report -> addPointCost(state, c_FC_admin_rituximab);
report -> addPointCost(state, c_FC_fludarabine);
report -> addPointCost(state, c_FC_admin_fludarabine);
report -> addPointCost(state, c_FC_cyclophosphamide);
report -> addPointCost(state, c_FC_admin_cyclophosphamide);
report -> setCost(c_FC_support_PFS);
report -> addPointCost(state, c_FC_bone_marrow_transplantation);
report -> addPointCost(state, c_FC_blood_transfusions);
}
scheduleAt(m1.randU(R::runif(0.0,1.0), now()),toProg);
scheduleAt(m2.randU(R::runif(0.0,1.0), now()),toExcD);
scheduleAt(background.rand(std::exp(-R::rexp(1.0)), dxage+now())-dxage, toExpD);
}
/**
Initialise a simulation run for an individual
*/
void IDM::init() {
id++;
pfs();
}
/**
Handle receiving self-messages
*/
void IDM::handleMessage(const ssim::cMessage* msg) {
if (param(\"debug\")) Rprintf(\"id: %i, state: %i, kind: %i, previous: %f, now: %f\\n\",
id, state, msg->kind, this->previousEventTime, ssim::now());
report->add(state, msg->kind, this->previousEventTime, ssim::now(), id);
cancel_events();
scheduleAt(15, toEOS); // End of study--Time horizon 15 years
switch(msg->kind) {
case toPFS:
pfs();
break;
case toProg:
state = Prog;
report -> setUtility(u_Prog);
if (treat == 1) { // RFC
report -> setCost(c_RFC_support_Prog + c_RFC_therapy);
}
else{ // FC
report -> setCost(c_FC_support_Prog + c_FC_therapy);
}
scheduleAt(m3.randU(R::runif(0.0,1.0)) + now(), toExcD);
scheduleAt(background.rand(std::exp(-R::rexp(1.0)), dxage+now())-dxage, toExpD);
break;
case toExcD:
case toExpD:
case toEOS:
ssim::Sim::stop_simulation();
break;
default:
REprintf(\"Invalid kind of event: %i.\\n\", msg->kind);
break;
}
if (id % 100000 == 0) Rcpp::checkUserInterrupt();
}
/**
Exported function: Set up the report and process, run the simulations and return a report
*/
//[[Rcpp::export]]
List callSim(int n, List param, bool indivp) {
Report report(n,indivp);
report.setPartition(0.0,100.0,param(\"partitionBy\"));
report.setDiscountRate(param(\"discountRate\"));
IDM person(param,&report);
runSimulations(&person, n);
Rcpp::List lst = report.asList();
lst.push_back(param,\"param\");
return lst;
}")
## Set seed for coherency
set.seed(12345)
##############################################################
##============================================================
## Install/Read packages
##============================================================
##############################################################
library(tidyverse)
library(rstpm2)
library(microsimulation)
library(Rcpp)
library(flextable)
library(dplyr)
##############################################################
##============================================================
## Run the survival models
##============================================================
##############################################################
source("03a_survmod_fpm.R")
##############################################################
##============================================================
## Read population mortality files
##============================================================
##############################################################
## Read the popmort file
popmort <- readRDS("../Data/01b_popmort.rds")
names(popmort)
## Transform sex variable to stay coherent with the data
popmort2 = transform(popmort, cohort=year-age)
popmort2 = arrange(popmort2, cohort, sex, age)
## Check the cohort data
table(popmort2$cohort)
## Define a function for drawing a piecewise constant rate
## Birth cohort approach
## getRates_cohort(1, 1942) means male, dx 2003 and age 61 -> cohort = 1942
getRates_cohort = function(.sex, .cohort) { # .cohort = year-age
subset(popmort2, sex==.sex & cohort==.cohort)
}
##############################################################
##============================================================
## Determine life years in progression state for RFC and FC
##============================================================
##############################################################
## The calculation of the costs of second-line and subsequent therapy in the progression state
## involves life years spent in progression state RFC and FC
## We first run the model just in order to determine LY_Prog_RFC and LY_Prog_FC
sourceCpp(code="
// BH is required for older versions of microsimulation
// RcppArmadillo is required for newer versions of microsimulation
// [[Rcpp::depends(BH)]]
// [[Rcpp::depends(RcppArmadillo)]]
// [[Rcpp::depends(microsimulation)]]
#include <RcppArmadillo.h>
#include <microsimulation.h>
using namespace arma;
using namespace ssim;
enum state_t {PFS, Prog, ExcD, ExpD};
enum event_t {toPFS, toProg, toExcD, toExpD, toEOS};
typedef ssim::SummaryReport<short,short> Report;
/**
Utility: Random exponential using rate parameterisation
*/
double rexpRate(double rate) { return R::rexp(1.0/rate); }
// template<class T> double rexpRate(T rate) { return R::rexp(1.0/as<double>(rate)); }
/**
Utility: Run a set of simulations for a single process
*/
void runSimulations(ssim::cProcess* process, int n) {
for (int i = 0; i < n; i++) {
ssim::Sim::create_process(process);
ssim::Sim::run_simulation();
ssim::Sim::clear();
}
}
/**
Define a class for the process
*/
class IDM : public ssim::cProcess
{
public:
int id;
state_t state;
Rcpp::List param;
Report *report;
ssim::Rpexp background;
ssim::gsm m1;
ssim::gsm m2;
ssim::gsm m3;
double dxage;
// Utility
double u_PFS;
double u_Prog;
int treat; // var_value variable indicating 1=RFC or 0=FC
IDM(Rcpp::List param, Report *report) : id(-1), param(param), report(report), background() {
// get the rates from param
vec mu0 = as<vec>(param(\"mu0\"));
vec ages = as<vec>(param(\"ages\"));
background = ssim::Rpexp(mu0.memptr(), ages.memptr(), ages.size());
// read in from param...
m1 = ssim::gsm(as<List>(param(\"m1\")));
m2 = ssim::gsm(as<List>(param(\"m2\")));
m3 = ssim::gsm(as<List>(param(\"m3\")));
dxage = param(\"dxage\");
treat = param(\"treat\");
// Utility
u_PFS = param(\"u_PFS\");
u_Prog = param(\"u_Prog\");
}
void pfs();
void init(); // to be specified
void handleMessage(const ssim::cMessage* msg);
void cancelEvents();
};
void IDM::pfs() {
state = PFS;
report -> setUtility(u_PFS);
scheduleAt(m1.randU(R::runif(0.0,1.0), now()), toProg);
scheduleAt(m2.randU(R::runif(0.0,1.0), now()), toExcD);
scheduleAt(background.rand(std::exp(-R::rexp(1.0)), dxage+now())-dxage, toExpD);
}
/**
Initialise a simulation run for an individual
*/
void IDM::init() {
id++;
pfs();
}
/**
Handle receiving self-messages
*/
void IDM::handleMessage(const ssim::cMessage* msg) {
if (param(\"debug\")) Rprintf(\"id: %i, state: %i, kind: %i, previous: %f, now: %f\\n\",
id, state, msg->kind, this->previousEventTime, ssim::now());
report->add(state, msg->kind, this->previousEventTime, ssim::now(), id);
cancel_events();
scheduleAt(15, toEOS); // End of study--Time horizon 15 years
switch(msg->kind) {
case toPFS:
pfs();
break;
case toProg:
state = Prog;
report -> setUtility(u_Prog);
scheduleAt(m3.randU(R::runif(0.0,1.0)) + now(), toExcD);
scheduleAt(background.rand(std::exp(-R::rexp(1.0)), dxage+now())-dxage, toExpD);
break;
case toExcD:
case toExpD:
case toEOS:
ssim::Sim::stop_simulation();
break;
default:
REprintf(\"Invalid kind of event: %i.\\n\", msg->kind);
break;
}
if (id % 100000 == 0) Rcpp::checkUserInterrupt();
}
/**
Exported function: Set up the report and process, run the simulations and return a report
*/
//[[Rcpp::export]]
List callSim_reduced(int n, List param, bool indivp) {
Report report(n,indivp);
report.setPartition(0.0,100.0,param(\"partitionBy\"));
report.setDiscountRate(param(\"discountRate\"));
IDM person(param,&report);
runSimulations(&person, n);
Rcpp::List lst = report.asList();
lst.push_back(param,\"param\");
return lst;
}")
source("~/Library/CloudStorage/OneDrive-KarolinskaInstitutet/ec_phd/Study2_Microsim/ChenEYT_microsim/Program/04b_table_survextrap.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-KarolinskaInstitutet/ec_phd/Study2_Microsim/ChenEYT_microsim/Program/04b_table_survextrap.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-KarolinskaInstitutet/ec_phd/Study2_Microsim/ChenEYT_microsim/Program/04b_table_survextrap.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-KarolinskaInstitutet/ec_phd/Study2_Microsim/ChenEYT_microsim/Program/04b_table_survextrap.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-KarolinskaInstitutet/ec_phd/Study2_Microsim/ChenEYT_microsim/Program/04b_table_survextrap.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-KarolinskaInstitutet/ec_phd/Study2_Microsim/ChenEYT_microsim/Program/04b_table_survextrap.R", echo=TRUE)
